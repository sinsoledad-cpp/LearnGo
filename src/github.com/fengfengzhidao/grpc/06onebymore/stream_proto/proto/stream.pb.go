// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.9.0
// source: stream_proto/stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_stream_proto_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_stream_proto_stream_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_stream_proto_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_stream_proto_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type FileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	mi := &file_stream_proto_stream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_stream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_stream_proto_stream_proto_rawDescGZIP(), []int{2}
}

func (x *FileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_stream_proto_stream_proto protoreflect.FileDescriptor

var file_stream_proto_stream_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x45, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x32, 0x26, 0x0a, 0x06, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x46,
	0x75, 0x6e, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x5c, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x03, 0x46, 0x75,
	0x6e, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x44, 0x6f,
	0x77, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stream_proto_stream_proto_rawDescOnce sync.Once
	file_stream_proto_stream_proto_rawDescData = file_stream_proto_stream_proto_rawDesc
)

func file_stream_proto_stream_proto_rawDescGZIP() []byte {
	file_stream_proto_stream_proto_rawDescOnce.Do(func() {
		file_stream_proto_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_proto_stream_proto_rawDescData)
	})
	return file_stream_proto_stream_proto_rawDescData
}

var file_stream_proto_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_stream_proto_stream_proto_goTypes = []any{
	(*Request)(nil),      // 0: Request
	(*Response)(nil),     // 1: Response
	(*FileResponse)(nil), // 2: FileResponse
}
var file_stream_proto_stream_proto_depIdxs = []int32{
	0, // 0: Simple.Fun:input_type -> Request
	0, // 1: ServiceStream.Fun:input_type -> Request
	0, // 2: ServiceStream.DownLoadFile:input_type -> Request
	1, // 3: Simple.Fun:output_type -> Response
	1, // 4: ServiceStream.Fun:output_type -> Response
	2, // 5: ServiceStream.DownLoadFile:output_type -> FileResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_proto_stream_proto_init() }
func file_stream_proto_stream_proto_init() {
	if File_stream_proto_stream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_proto_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_stream_proto_stream_proto_goTypes,
		DependencyIndexes: file_stream_proto_stream_proto_depIdxs,
		MessageInfos:      file_stream_proto_stream_proto_msgTypes,
	}.Build()
	File_stream_proto_stream_proto = out.File
	file_stream_proto_stream_proto_rawDesc = nil
	file_stream_proto_stream_proto_goTypes = nil
	file_stream_proto_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimpleClient is the client API for Simple service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleClient interface {
	Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type simpleClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleClient(cc grpc.ClientConnInterface) SimpleClient {
	return &simpleClient{cc}
}

func (c *simpleClient) Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Simple/Fun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServer is the server API for Simple service.
type SimpleServer interface {
	Fun(context.Context, *Request) (*Response, error)
}

// UnimplementedSimpleServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleServer struct {
}

func (*UnimplementedSimpleServer) Fun(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fun not implemented")
}

func RegisterSimpleServer(s *grpc.Server, srv SimpleServer) {
	s.RegisterService(&_Simple_serviceDesc, srv)
}

func _Simple_Fun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).Fun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/Fun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).Fun(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Simple_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Simple",
	HandlerType: (*SimpleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fun",
			Handler:    _Simple_Fun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream_proto/stream.proto",
}

// ServiceStreamClient is the client API for ServiceStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceStreamClient interface {
	Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_FunClient, error)
	DownLoadFile(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_DownLoadFileClient, error)
}

type serviceStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceStreamClient(cc grpc.ClientConnInterface) ServiceStreamClient {
	return &serviceStreamClient{cc}
}

func (c *serviceStreamClient) Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_FunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceStream_serviceDesc.Streams[0], "/ServiceStream/Fun", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStreamFunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceStream_FunClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceStreamFunClient struct {
	grpc.ClientStream
}

func (x *serviceStreamFunClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceStreamClient) DownLoadFile(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_DownLoadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceStream_serviceDesc.Streams[1], "/ServiceStream/DownLoadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStreamDownLoadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceStream_DownLoadFileClient interface {
	Recv() (*FileResponse, error)
	grpc.ClientStream
}

type serviceStreamDownLoadFileClient struct {
	grpc.ClientStream
}

func (x *serviceStreamDownLoadFileClient) Recv() (*FileResponse, error) {
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceStreamServer is the server API for ServiceStream service.
type ServiceStreamServer interface {
	Fun(*Request, ServiceStream_FunServer) error
	DownLoadFile(*Request, ServiceStream_DownLoadFileServer) error
}

// UnimplementedServiceStreamServer can be embedded to have forward compatible implementations.
type UnimplementedServiceStreamServer struct {
}

func (*UnimplementedServiceStreamServer) Fun(*Request, ServiceStream_FunServer) error {
	return status.Errorf(codes.Unimplemented, "method Fun not implemented")
}
func (*UnimplementedServiceStreamServer) DownLoadFile(*Request, ServiceStream_DownLoadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownLoadFile not implemented")
}

func RegisterServiceStreamServer(s *grpc.Server, srv ServiceStreamServer) {
	s.RegisterService(&_ServiceStream_serviceDesc, srv)
}

func _ServiceStream_Fun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceStreamServer).Fun(m, &serviceStreamFunServer{stream})
}

type ServiceStream_FunServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type serviceStreamFunServer struct {
	grpc.ServerStream
}

func (x *serviceStreamFunServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceStream_DownLoadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceStreamServer).DownLoadFile(m, &serviceStreamDownLoadFileServer{stream})
}

type ServiceStream_DownLoadFileServer interface {
	Send(*FileResponse) error
	grpc.ServerStream
}

type serviceStreamDownLoadFileServer struct {
	grpc.ServerStream
}

func (x *serviceStreamDownLoadFileServer) Send(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ServiceStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceStream",
	HandlerType: (*ServiceStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fun",
			Handler:       _ServiceStream_Fun_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownLoadFile",
			Handler:       _ServiceStream_DownLoadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream_proto/stream.proto",
}
